[
   {
     "question": "Các tiến trình (Process) trong một hệ thống phân tán gồm nhiều máy tính đặt tại nhiều địa điểm khác nhau giao tiếp với nhau bằng cách nào?",
     "options": [
       "Không sử dụng mô hình bộ nhớ chia sẻ, cũng như mô hình truyền thông điệp qua mạng truyền thông",
       "Sử dụng mô hình bộ nhớ chia sẻ",
       "Sử dụng mô hình truyền thông điệp qua mạng truyền thông"
     ],
     "answer": [2],
     "explanation": "Trong hệ thống phân tán, các tiến trình giao tiếp qua mạng bằng cách gửi và nhận thông điệp, không sử dụng bộ nhớ chia sẻ."
   },
   {
     "question": "Các luồng (Thread) trong một hệ thống đồng thời dựa trên cơ chế khóa, chạy trên một máy tính gồm nhiều bộ vi xử lý, giao tiếp với nhau bằng cách nào?",
     "options": [
       "Sử dụng mô hình bộ nhớ chia sẻ",
       "Không sử dụng mô hình bộ nhớ chia sẻ, cũng như mô hình truyền thông điệp qua mạng truyền thông",
       "Sử dụng mô hình truyền thông điệp qua mạng truyền thông"
     ],
     "answer": [0],
     "explanation": "Các luồng trong một hệ thống đồng thời trên cùng một máy tính sử dụng bộ nhớ chia sẻ để giao tiếp."
   },
   {
     "question": "Chương trình đồng thời khác với chương trình tuần tự ở những điểm nào sau đây?",
     "options": [
       "Trong chương trình đồng thời, tại một thời điểm có thể thực hiện nhiều tính toán, trong khi đó với chương trình tuần tự, tại một thời điểm chỉ có nhiều nhất 1 tính toán được thực hiện",
       "Hai kiểu chương trình này không có sự khác biệt nào cả",
       "Chương trình tuần tự chỉ có 1 luồng thực thi, trong khi đó chương trình đồng thời có nhiều luồng cùng thực thi",
       "Khi chạy một chương trình đồng thời, có thể xảy ra nhiều kịch bản khác nhau, dẫn đến nhiều kết quả khác nhau"
     ],
     "answer": [0, 2, 3],
     "explanation": "Chương trình đồng thời cho phép nhiều tính toán cùng lúc, có nhiều luồng thực thi, và có thể dẫn đến các kết quả khác nhau do tính bất định."
   },
   {
     "question": "Cho một chương trình đồng thời gồm có hai luồng 𝑃 và 𝑄. Luồng 𝑃 thực hiện hai câu lệnh p1 và p2. Tương tự, luồng 𝑄 thực hiện hai câu lệnh q1 và theo sau bởi q2. Những kịch bản (thứ tự của các câu lệnh) nào sau đây KHÔNG THỂ xảy ra khi chương trình này được thực thi? <img src='img\\question4.png' alt='Sơ đồ luồng P và Q'>",
     "options": [
       "p1 -> q1 -> p2 -> q2",
       "q1 -> p1 -> q2 -> p2",
       "p1 -> p2 -> q1 -> q2",
       "p1 -> q2 -> p2 -> q1",
       "q1 -> p2 -> q2 -> p1"
     ],
     "answer": [0, 1, 3, 4],
     "explanation": "Các kịch bản p1 -> q1 -> p2 -> q2, q1 -> p1 -> q2 -> p2, p1 -> q2 -> p2 -> q1, và q1 -> p2 -> q2 -> p1 không thể xảy ra do vi phạm thứ tự thực thi trong cùng luồng."
   },
   {
     "question": "Trạng thái đua tranh (race condition) giữa các luồng trong một chương trình đồng thời dẫn đến những điều nào sau đây?",
     "options": [
       "Tính chính xác của chương trình bị phụ thuộc vào thời gian thực thi tương đối của các sự kiện",
       "Giá trị của các biến chia sẻ luôn luôn nhất quán và chính xác khi các luồng thực hiện việc cập nhật các biến đó",
       "Dữ liệu chia sẻ có thể bị mất mát khi các luồng cùng thực hiện việc thay đổi dữ liệu đó"
     ],
     "answer": [0, 2],
     "explanation": "Trạng thái đua tranh gây ra phụ thuộc vào thời gian thực thi và có thể dẫn đến mất mát dữ liệu khi các luồng truy cập đồng thời."
   },
   {
     "question": "Chương trình Java sau khi chạy sẽ bao gồm tất cả bao nhiêu luồng? <img src='img\\question6.png' alt='Mã nguồn Java'>",
     "options": ["3", "2", "4", "1"],
     "answer": [1],
     "explanation": "Mặc định, một chương trình Java có ít nhất 1 luồng chính (main thread), trừ khi được tạo thêm luồng khác."
   },
   {
     "question": "Phương thức hay cơ chế join trong các ngôn ngữ hỗ trợ lập trình đa luồng được dùng trong trường hợp nào sau đây?",
     "options": [
       "Khi muốn hai luồng T1, T2 có thể thực thi đồng thời",
       "Khi muốn hai luồng T1, T2 cùng tham gia vào giải quyết một bài toán chung",
       "Khi muốn một luồng T1 dừng lại và đợi một luồng T2 khác hoàn thành công việc thì T1 mới được thực thi tiếp"
     ],
     "answer": [2],
     "explanation": "Phương thức join được dùng để một luồng đợi luồng khác hoàn thành trước khi tiếp tục."
   },
   {
     "question": "Khi chạy chương trình Java sau có thể sinh ra những kết quả nào sau đây? <img src='img\\question8.png' alt='Mã nguồn Java'>",
     "options": [
       "T-m T-1 T-2",
       "T-2 T-1 T-m",
       "T-m T-2 T-1",
       "T-1 T-m T-2",
       "T-2 T-m T-1",
       "T-1 T-2 T-m"
     ],
     "answer": [0, 1, 2, 3, 4, 5],
     "explanation": "Do tính bất định của luồng, tất cả các thứ tự thực thi đều có thể xảy ra."
   },
   {
     "question": "Cho đoạn mã giả của một chương trình đồng thời với luồng t, u như Hình dưới đây. Giả sử các câu lệnh được thực thi một cách nguyên tử. Sau khi hai luồng t, u thực thi xong các câu lệnh của mình, biến chia sẻ counter có thể nhận những giá trị nào sau đây? <img src='img\\question9.png' alt='Đoạn mã giả'>",
     "options": ["3", "1", "2", "0"],
     "answer": [1, 2],
     "explanation": "Do thực thi nguyên tử, giá trị counter có thể là 1 hoặc 2 tùy thuộc vào thứ tự thực thi của luồng t và u."
   },
   {
     "question": "Trạng thái đua tranh (race condition) của các luồng trong một chương trình đồng thời, liên quan đến việc cập nhật dữ liệu / biến chia sẻ, có thể dẫn đến điều gì sau đây?",
     "options": [
       "Làm tăng thời gian tính toán của chương trình",
       "Làm chương trình bị treo",
       "Làm dữ liệu bị mất mát, hư hỏng, không nhất quán"
     ],
     "answer": [2],
     "explanation": "Trạng thái đua tranh dẫn đến dữ liệu không nhất quán khi các luồng cập nhật đồng thời."
   }
 ]